1.利用Express托管静态文件：
	通过Express内置的 express.static 可以方便地托管静态文件，例如图片、css、js文件等
	将静态资源文件所在的目录作为参数传递给 express.static 中间件就可以提供静态资源文件的访问了。
	例：
	app.use(express.static('public'));

	如果静态资源存放在多个目录下面，可以多次调用express.static中间件中
	app.use(express.static('public'));
	app.use(express.static('files'));

	访问静态资源文件时， express.static中间件会根据目录添加的顺序查找所需的文件
	如果希望所有通过 express.static访问的文件都存放在一个虚拟目录下面，可以通过为静态资源目录指定一个挂载路径的方式来实现。
	如：
	app.use('/static', express.static('public'));


2.路由
	路由是由一个URL、HTTP请求(GET/POST等)和若干个句柄组成，它的结构如下：app.(METHOD(path,[callback,....], callback)) app是express对象的一个实例，METHOD是一个HTTP请求方法，path是服务器上的路径，callback是当路由匹配时要执行的函数。
	例子：
	var express = require('express');
	var app = express();

	app.get('/', function(req, res) {
		res.send('hello world');
	})

	路由方法：get,post,put,head,delete,options,trace,copy,lock,mkcol,move,purge等
	app.all()方法是一个特殊的路由方法，没有任何HTTP方法与其对应，它的作用是对于一个路径上的所有请求加载中间件。
		在下面的例子中，来自'/secret'的请求，不管使用GET/POST/PUT/DELETE或者其他任何http模块支持的HTTP请求，句柄都会得到执行。
		app.all('/secret', function(req,res,next) {
			console.log('Accessing the secret section...');
			next();  //通过了console.log()则会执行next()方法；
		})

	路由路径：
		路由路径和请求方法一起定义了请求的端点，它可以是字符串、字符串模式或者正则表达式
		如：
		//匹配根路径的请求
		app.get('/', function(req, res) {
			res.send('root');
		});
		//匹配/about路径的请求
		app.get('/about', function(req, res) {
			res.send('about');
		});
		//匹配 /random.text路径的请求
		app.get('/random.text', function(req, res) {
			res.send('random.text');
		})

	路由句柄：
		可以为请求处理提供多个回调函数，其行为类似

3.使用中间件

http://www.cnblogs.com/zhongweiv/p/mongoose.html
https://github.com/chyingp/nodejs-learning-guide
https://segmentfault.com/a/1190000007769095
	


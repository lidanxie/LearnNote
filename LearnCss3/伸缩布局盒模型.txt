# 伸缩布局


## 一、旧版Flexbox模型基本使用
### 1.伸缩容器设置display

```
display: box | inline-box
```
* box: 设置为块伸缩容器；
* inline-box: 设置为内联级伸缩容器。

#### display属性的基本使用  
伸缩容器主要用来将元素设置伸缩容器。伸缩容器为其内容创建新的伸缩格式化上下文。除了伸缩排版用来替代块布局以外，创建一个伸缩格式化上下文与创建一个块格式化上下文是一样的。浮动无法影响伸缩容器，而且伸缩容器的`margin`与其内容的`margin`不会重叠。

如下面的例子所示：

```
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>旧版本flexbox</title>
	<style type="text/css">
		*{
			margin: 0;
			padding: 0;
		}
		body>div {
			border: 1px solid #ccc;
			margin: 20px;
			padding: 10px;
		}
		div > div {
			border: 1px solid #f36;
			width: 100px;
			height: 100px;
			text-align: center;
			line-height: 100px;
		}
		.box {
			display: -moz-box;
			display: -webkit-box;
			display: box;
		}
		.inline-box {
			display: -moz-inline-box;
			display: -webkit-inline-box;
			display: inline-box;
		}
	</style>
</head>
<body>
	<div class="box">
		<div>A</div>
		<div>B</div>
		<div>C</div>
		<div>D</div>
	</div>
	<div class="inline-box">
		<div>A</div>
		<div>B</div>
		<div>C</div>
		<div>D</div>
	</div>
</body>
</html>
```

![image](http://note.youdao.com/favicon.ico)

### 2.伸缩流方向 box-orient
> 伸缩流方向`box-orient` 属性主要用来创建主轴，从而定义了伸缩项目在伸缩容器中的流动布局方向。换句话说主要用来指定伸缩项目如何放置在伸缩容器的主轴上。

### 语法及参数

```
box-orient: horizontal | vertical | inline-axis | block-axis
```
* horizontal: 伸缩项目在伸缩容器中从左到右在一条平行线上排列显示。
* vertical: 伸缩项目在伸缩容器中从上到下在一条垂直线上排列显示。
* inline-axis: 伸缩项目沿着内联轴排列显示。
* block-axis: 伸缩项目沿着块轴排列显示。

看下面的例子
```
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>旧版伸缩流方向</title>
	<style type="text/css">
		*{
			margin: 0;
			padding: 0;
		}
		body>div {
			border: 1px solid #ccc;
			margin: 20px;
			padding: 10px;
		}
		div > div {
			border: 1px solid #f36;
		}
		.box {
			display: -moz-box;
			display: -webkit-box;
			display: box;
		}
		.box-horizontal {
			-moz-box-orient: horizontal;
			-webkit-box-orient: horizontal;
			box-orient: horizontal;
		}
		.box-vertical {
			-moz-box-orient: vertical;
			-webkit-box-orient: vertical;
			box-orient: vertical;
		}
		.box-inline-axis {
			-moz-box-orient: inline-axis;
			-webkit-box-orient: inline-axis;
			box-orient: inline-axis;
		}
		.box-block-axis {
			-moz-box-orient: block-axis;
			-webkit-box-orient: block-axis;
			box-orient: block-axis;
		}
	</style>
</head>
<body>
	<div class="box box-horizontal">
		<div>A</div>
		<div>B</div>
		<div>C</div>
		<div>D</div>
	</div>
	<div class="box box-vertical">
		<div>A</div>
		<div>B</div>
		<div>C</div>
		<div>D</div>
	</div>
	<div class="box box-inline-axis">
		<div>A</div>
		<div>B</div>
		<div>C</div>
		<div>D</div>
	</div>
	<div class="box box-block-axis">
		<div>A</div>
		<div>B</div>
		<div>C</div>
		<div>D</div>
	</div>
</body>
</html>
```

![image](http://note.youdao.com/favicon.ico)

### 3. 布局顺序 box-direction
`box-direction`属性主要是用来设置伸缩项目在伸缩容器中流动顺序。

```
box-direction: normal | reverse
```
* normal: 表示伸缩项目从主轴起始点开始按文档流结构，从上到下按顺序排列。
* reverse: 表示伸缩项目从主轴终点开始按文档流结构反向，从下往上排列。

[box-direction.html](http://note.youdao.com/)

![image](http://note.youdao.com/favicon.ico)

### 4. 伸缩换行 box-lines
`box-lines`可以用来设置伸缩容器的伸缩项目是单行还是多行显示。默认情况下都是单行或单列显示。

```
box-lines: single | multiple
```
* single: 伸缩容器的所有伸缩项目一行或一列显示。如果伸缩容器设置了overflow属性，可以直接控制伸缩项目是否隐藏、裁剪或者出现滚动条。
* multiple: 指定伸缩容器多行或多列显示伸缩项目，当伸缩容器没有足够空间放置所有伸缩项目的时候，伸缩项目就会自动换行或多列显示。


**注意：box-lines到目前为止还没有浏览器支持这个属性**

### 5. 主轴对齐 box-pack
主轴对齐用来设置伸缩器当前伸缩项目在主轴方向的对齐方式。指定如何在伸缩项目之间分布伸缩容器额外空间。当一行上的所有伸缩项目不能伸缩或可伸缩但是已达到最大长度时，这一属性才会对伸缩容器额外空间进行分配。

```
box-pack: start | end | center | justify
```
* start: 伸缩项目向一行的起始位置靠齐。伸缩容器沿着布局轴方向的所有额外空间被置于布局轴的末尾。 
* end: 和 start 值相反，伸缩项目向一行的结束位置靠齐。伸缩容器沿着布局轴方向的额外空间都被置于布局轴的开始。
* center: 伸缩项目向一行的中间位置靠齐。伸缩容器所有额外空间平均分布在第一伸缩项目前面和最后一个伸缩项目的后面。
* justify: 伸缩项目会平均分布在一行里。伸缩容器所有额外空间平均分布在所有伸缩项目之间，而且在第一个伸缩项目之前和最后一个伸缩项目之后不分配伸缩容器的任何额外空间。


### 6.侧轴对齐 box-align
box-align是用来管理伸缩容器侧轴方向的额外空间，也就是垂直于主轴方向。

```
box-align: start | end | center | baseline | stertch
```
* start: 伸缩项目顶部边缘放置在伸缩容器的顶端，伸缩容器的额外空间放置在伸缩项目底端。
* end: 与start相反。
* center: 伸缩项目紧靠在一起，垂直居中于伸缩容器。伸缩容器额外的空间平均分配在伸缩项目的顶部和底部。
* baseline: 伸缩项目根据它们的极限对齐。伸缩容器额外空间可前可后显示。
* stretch: 伸缩项目填充整个伸缩容器。

[demo](http://note.youdao.com/)

![start](http://note.youdao.com/favicon.ico)
![end](http://note.youdao.com/favicon.ico)
![center](http://note.youdao.com/favicon.ico)
![baseline](http://note.youdao.com/favicon.ico)
![stertch](http://note.youdao.com/favicon.ico)

### 7. 伸缩性 box-flex
box-flex属性嗯呢该个灵活地控制伸缩项目在伸缩容器中的显示空间。
在一个水平导向框中，首先会计算每个伸缩项目的宽度。如果所有伸缩项目宽度的和与伸缩容器宽度相等，伸缩容器就没有额外的空间，这个时候运用在伸缩项目的宽度是每个伸缩项目的其次宽度；如果伸缩项目宽度之和小于伸缩容器宽度，这时伸缩容器有额外空间可用，伸缩项目会根据box-flex对应的比例进行扩展。如果伸缩项目的宽度之和大于伸缩容器宽度，伸缩容器没有足够空间，这时伸缩项目会根据box-flex的比例值对伸缩项目进行收缩，以防止伸缩项目溢出伸缩容器。


```
box-flex: <number>
```

伸缩项目具体增加或减小的宽度值取决于伸缩项目的固有的宽度的比例，而不是某个绝对的数值。设置了box-flex值的伸缩项目是按照特定比例来弹性适应的。举个例子，一个伸缩项目设置box-flex值为2，另一个伸缩项目设置box-flex值为1，伸缩容器额外的宽度将分成三等分，设置box-flex为2的伸缩项目会占两份，而设置box-flex为1的伸缩项目会占一份。

![未设置box-flex](http://note.youdao.com/favicon.ico)
![box-flex-1](http://note.youdao.com/favicon.ico)

把两个伸缩项目都设置box-flex值为1，就会把伸缩容器额外的空间210px平均分成两份，添加到每个伸缩项目上，这个时候绿色的伸缩项目不再是内容宽度，而是345px(240+105),橙色的伸缩项目宽度不再是内容的宽度，而是615px(510+105)

![1:2的比例](http://note.youdao.com/favicon.ico)

##### 收缩
![原始](http://note.youdao.com/favicon.ico)

box-flex的比例3:1，伸缩项目收缩的效果
![比例3:1](http://note.youdao.com/favicon.ico)

[box-flex的demo](http://note.youdao.com/)

### 8. 显示顺序 box-ordinal-group
box-ordinal-group属性可以修改伸缩项目在页面中的显示顺序，也可以用这个属性实现排序组。


```
box-ordi nal-group: <integer>
```
默认值为1

![设置了box-ordinal-group](http://note.youdao.com/favicon.ico)

伸缩项目的box-ordinal-group的值越大，伸缩项目排在后面。

[box-ordinal-group的demo](http://note.youdao.com/)

## 二、混合版本Flexbox模型基本使用：chrome浏览器不兼容
### 1.伸缩容器设置 display

```
display: flexbox | inline-flexbox
```
* flexbox：设置元素为块级伸缩容器
* inline-flexbox：设置元素为内联块级伸缩容器

伸缩布局模型混合版本主要用于IE10浏览器，在使用混合版本时需要使用浏览器前缀"-ms-"

```
.element { display: -ms-flexbox }
```

### 2.伸缩流方向 flex-direction
flex-direction 与旧版语法中的box-orient属性一样，定义伸缩项目放置在伸缩容器的方向。


```
-ms-flex-direction: row | row-reverse | column | column-reverse
```
* row:初始值。伸缩项目按照它们在文档流中出现的顺序进行显示。其中文本书写模式直接影响了文档流的方向。如果文本的书写模式为ltr,则伸缩项目从左到右排列，如果为rtl,则伸缩项目从右到左排列。
* row-reverse:与 row 相反，如果文本的书写模式为ltr,则伸缩项目从右到左排列，如果为rtl,则伸缩项目从左到右排列。
* column:按照它们在文档流出现的顺序按列从上到下排列
* column-reverse:与column相反，伸缩项目从下到上排列。

## 三、最新版本Flexbox模型基本使用

### 1.伸缩容器

```
display: flex | inline-flex
```
参数同旧版本中box一样的用法。

### 2. 伸缩流方向 flex-direction

```
flex-direction: row | row-reverse | colum | column-reverse
```
* row: 在ltr排版方式下从左到右排列，在rtl排版方式下从右到左排列。
* row-reverse: 与row相反
* column: 类似于row:从上到下排列
* column-reverse:与column相反，从下到上排列。


### 3.伸缩换行 flex-wrap
主要用来定义伸缩容器里是单行还是多行显示。
* nowrap: 单行显示，ltr排版下，伸缩项从左到右排列，rtl从右到左排列
* wrap:多行显示，ltr排版下，从左到右排列，rtl下从右到左排列
* wrap-reverse:多行显示，与wrap相反。

### 4. 伸缩流方向与换行 flex-flow

```
flex-flow: <'flex-direction'> || <'flex-wrap'>
```

### 5.主轴对齐 justify-content
主要用来定义伸缩项目沿着主轴线的对齐方式。

```
justify-content: flex-start | flex-end | center | space-between | space-around
```
* flex-start:向其实位置靠齐
* flex-end： 向结束位置靠齐
* center：向中间位置靠齐
* space-between：平均地分布在行里。第一个伸缩项目在一行中的最开始位置，最后一个伸缩项目在一行中的最终点位置。
* space-around： 伸缩项目会平均分布在行里，两端保留一半的空间。


### 6. 侧轴对齐 align-items 和 align-self
align-items 和 justify-content 相呼应。align-items调整伸缩项目在侧轴上的定位方式，主要用来定义伸缩项目可以在伸缩容器的当前行的侧轴上对齐方式。

```
align-items: flex-start |flex-end | center | baseline | stretch
```
* flex-start: 在侧轴起点边
* flex-end：在侧轴终点边
* center：在侧轴上居中放置
* baseline： 基线对齐
* stretch： 拉伸填充

align-self属性主要用来设置单独伸缩项目在侧轴的对齐方式，值和aligin-self一样。


### 7. 堆栈伸缩行 align-content
align-content属性主要用来调准伸缩容器里的对齐方式。

```
align-content: flex-start | flex-end | center | space-between | space-around | stretch
```
* flex-start: 在伸缩容器起点位置
* flex-end：在伸缩容器终点位置
* center：在伸缩容器中间位置
* space-between： 平均分布
* space-around：平均分布，两边各有一半的空间
* stretch：默认值，各行将会伸展以占用额外的空间。


### 8.伸缩性 flex

```
flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] 
```
用来指定可伸缩长度的部件：扩展比率，收缩比率，以及伸缩基准值。

[flexDemo.html](http://note.youdao.com/)

### 9. 显示顺序 order

```
order: <number>
```
[flex-order.html](http://note.youdao.com/)